<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Department;

/**
 * DepartmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentRepository extends EntityRepository
    {

    public function findDepartmentProduct2($id)
    {
        return $this
            ->createQueryBuilder(['p', 'c', 'gc', 'ggc'])
            ->select(['p', 'c', 'gc', 'ggc'])
            ->from('AppBundle:Department', 'p')
            ->leftJoin('p.Category', 'c')
            ->leftJoin('c.Group', 'gc')
            ->leftJoin('gc.Product', 'ggc')
            ->where('p.id = :id')
            ->andWhere('ggc.expire = :no')
            ->setParameter('no',0)
            ->setParameter('id', $id)
            ->getQuery();

    }


    public function findAllOrderedById()
         {
		        return $this->getEntityManager()
		                    ->createQuery( 'SELECT n FROM AppBundle:Department n
				                            ORDER BY n.id DESC' ) 
					        ->getResult();
         }
	
	public function findPositionedDepartment($position,$limit)
       {
		return $this
		 ->createQueryBuilder('n')
            ->select('n')
            ->where('n.position = :position')
            ->andWhere('n.expire = :no')
            ->setParameter('no',0)
            ->setParameter('position', $position)
            ->setMaxResults($limit)
            ->getQuery()
			->getResult();
       }



    public function findAllRescentPublish($limit) {
        return $this
            ->createQueryBuilder('e')
            ->select('e')
            ->where('e.publishDate <= :now')
            ->andWhere('e.expire = :no')
            ->setParameter('no',0)
            ->setParameter('now', new \DateTime())
            ->orderBy('e.publishDate', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function findDepartment($limit)
    {
        return $this
            ->createQueryBuilder('n')
            ->select('n')
            ->where('n.visible = :yes')
            ->setParameter('yes',1)
            ->orderBy('n.position', 'ASC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function moreDepartment($catId,$limit)
    {
        return $this
            ->createQueryBuilder('n')
            ->select('n')
            ->where('n.category = :catId')
            ->andWhere('n.expire = :no')
            ->setParameter('no',0)
            ->setParameter('catId', $catId)
            ->orderBy('n.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();

    }

    public function badgeDepartment($limit)
    {
        return $this
            ->createQueryBuilder('n')
            ->select('n')
            ->Where('n.expire = :no')
            ->setParameter('no',0)
            ->orderBy('n.priority', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();

    }
    public function mostView($limit){
        return $this
            ->createQueryBuilder('n')
            ->select('n')
            ->where('n.view >= :view')
            ->andWhere('n.expire = :no')
            ->setParameter('no',0)
            ->setParameter('view', 1)
            ->orderBy('n.view', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

     public function findNext($limit,$id)
     {
         return $this
             ->createQueryBuilder('n')
             ->select('n')
             ->where('n.id' > ':id')
             ->andWhere('n.expire = :no')
             ->setParameter('no',0)
             ->setParameter('id',$id)
             ->orderBy('n.id', 'ASC')
             ->setMaxResults($limit)
             ->getQuery()
             ->getResult();
     }



    public function findSliderDepartment($limit){
        return $this
            ->createQueryBuilder('n')
            ->select('n')
            ->where('n.slide = :show')
            ->andWhere('n.expire = :no')
            ->setParameter('no',0)
            ->setParameter('show',1)
            ->orderBy('n.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

}
